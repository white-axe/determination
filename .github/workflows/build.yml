name: Build
on:
  push:
    paths-ignore:
      - COPYING
      - LICENSE
      - '**.md'
  pull_request:
    paths-ignore:
      - COPYING
      - LICENSE
      - '**.md'
  release:
    types:
      - published
  workflow_dispatch:
permissions:
  contents: write
  attestations: write
  id-token: write
  packages: write
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
      - name: Build
        run: nix build -Lo container-image-determination.tar
      - name: Attest artifact
        id: attest-artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: container-image-determination.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-image-determination.tar
          path: container-image-determination.tar
      - name: Prepare release files
        run: cp "${{ steps.attest-artifact.outputs.bundle-path }}" ./container-image-determination.tar.sigstore.json
      - name: Release
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            COPYING
            container-image-determination.tar
            container-image-determination.tar.sigstore.json
      - name: Install Skopeo from Nixpkgs
        run: |
          nix build -L '.#skopeo'
          ln -s result/bin/skopeo skopeo
      - name: Generate summary
        run: |
          echo '### Skopeo Inspection' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          ./skopeo inspect oci-archive:container-image-determination.tar | jq -M >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '### Manifest' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          ./skopeo inspect --raw oci-archive:container-image-determination.tar | jq -M >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '### Configuration' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          ./skopeo inspect --config --raw oci-archive:container-image-determination.tar | jq -M >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: Upload to ghcr.io
        id: upload-ghcr
        if: ${{ github.event_name == 'release' }}
        run: |
          ./skopeo login -u ${{ github.actor }} -p ${{ github.token }} --compat-auth-file ~/.docker/config.json ghcr.io
          ./skopeo inspect oci-archive:container-image-determination.tar | jq -er '.Digest' > digest
          cat digest
          echo "digest=$(cat digest)" >> $GITHUB_OUTPUT
          tag=${{ github.event.release.tag_name }}
          old=
          if [[ ${tag#v} =~ ^[[:digit:]] ]]; then
            tag=${tag#v}
          fi
          while [[ $tag != $old ]]; do
            echo Tag $tag
            ./skopeo copy --preserve-digests oci-archive:container-image-determination.tar docker://ghcr.io/${{ github.repository }}:$tag
            old=$tag
            tag=${tag%.*}
          done
          latest=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -er '.tag_name')
          if [[ "${{ github.event.release.tag_name }}" == "$latest" ]]; then
            echo Tag latest
            ./skopeo copy --preserve-digests oci-archive:container-image-determination.tar docker://ghcr.io/${{ github.repository }}:latest
          else
            echo Not tagging this image as latest since this is not the latest release
          fi
      - name: Attest ghcr.io image
        id: attest-ghcr
        if: ${{ github.event_name == 'release' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.upload-ghcr.outputs.digest }}
      - name: Prepare ghcr.io attestation for release
        if: ${{ github.event_name == 'release' }}
        run: cp "${{ steps.attest-ghcr.outputs.bundle-path }}" ./ghcr.io.sigstore.json
      - name: Release ghcr.io attestation
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: ghcr.io.sigstore.json
  close:
    name: Close
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
      - name: Close
        run: |
          bash close.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: closure-determination.tar.zst
          path: closure-determination.tar.zst
      - name: Attest artifact
        id: attest-artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: closure-determination.tar.zst
      - name: Prepare release files
        run: |
          cp "${{ steps.attest-artifact.outputs.bundle-path }}" ./closure-determination.tar.zst.sigstore.json
      - name: Release
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            closure-determination.tar.zst
            closure-determination.tar.zst.sigstore.json
