name: Build
on:
  push:
    paths-ignore:
      - COPYING
      - LICENSE
      - '**.md'
  pull_request:
    paths-ignore:
      - COPYING
      - LICENSE
      - '**.md'
  release:
    types:
      - published
  workflow_dispatch:
permissions:
  contents: write
  attestations: write
  id-token: write
  packages: write
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
      - name: Build
        run: nix build -Lo container-image-determination.tar
      - name: Attest artifact
        id: attest-artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: container-image-determination.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-image-determination.tar
          path: container-image-determination.tar
      - name: Prepare release files
        run: cp "${{ steps.attest-artifact.outputs.bundle-path }}" ./container-image-determination.tar.sigstore.json
      - name: Release
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            COPYING
            container-image-determination.tar
            container-image-determination.tar.sigstore.json
      - name: Install Skopeo from Nixpkgs
        run: |
          nix build -L '.#skopeo'
          ln -s result/bin/skopeo skopeo
      - name: Generate summary
        run: |
          echo '### Skopeo Inspection' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          ./skopeo inspect oci-archive:container-image-determination.tar | jq -M >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '### Manifest' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          ./skopeo inspect --raw oci-archive:container-image-determination.tar | jq -M >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '### Configuration' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          ./skopeo inspect --config --raw oci-archive:container-image-determination.tar | jq -M >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: Upload to ghcr.io
        id: upload-ghcr
        if: ${{ github.event_name == 'release' }}
        run: |
          ./skopeo login -u ${{ github.actor }} -p ${{ github.token }} --compat-auth-file ~/.docker/config.json ghcr.io
          ./skopeo inspect oci-archive:container-image-determination.tar | jq -er '.Digest' > digest
          cat digest
          echo "digest=$(cat digest)" >> $GITHUB_OUTPUT
          tag=${{ github.event.release.tag_name }}
          old=
          if [[ ${tag#v} =~ ^[[:digit:]] ]]; then
            tag=${tag#v}
          fi
          while [[ $tag != $old ]]; do
            echo Tag $tag
            ./skopeo copy --preserve-digests oci-archive:container-image-determination.tar docker://ghcr.io/${{ github.repository }}:$tag
            old=$tag
            tag=${tag%.*}
          done
          latest=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -er '.tag_name')
          if [[ "${{ github.event.release.tag_name }}" == "$latest" ]]; then
            echo Tag latest
            ./skopeo copy --preserve-digests oci-archive:container-image-determination.tar docker://ghcr.io/${{ github.repository }}:latest
          else
            echo Not tagging this image as latest since this is not the latest release
          fi
      - name: Attest ghcr.io image
        id: attest-ghcr
        if: ${{ github.event_name == 'release' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.upload-ghcr.outputs.digest }}
      - name: Prepare ghcr.io attestation for release
        if: ${{ github.event_name == 'release' }}
        run: cp "${{ steps.attest-ghcr.outputs.bundle-path }}" ./ghcr.io.sigstore.json
      - name: Release ghcr.io attestation
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: ghcr.io.sigstore.json
  close:
    name: Close
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
      - name: Install Tar and Zstandard from Nixpkgs
        run: |
          nix build -L '.#tar'
          nix copy --to ./closure-tar '.#tar' --no-check-sigs
          ln -s "$(realpath "result/bin/tar")" tar
          nix build -L '.#zstd'
          nix copy --to ./closure-zstd '.#zstd' --no-check-sigs
          ln -s "$(realpath "result-bin/bin/zstd")" zstd
      - name: Close
        run: |
          nix store gc
          paths=
          image_derivation="$(nix derivation show | jq -er 'keys_unsorted[0]')"
          formatter_derivation="$(nix derivation show '.#formatter' | jq -er 'keys_unsorted[0]')"
          for derivation in $(nix derivation show -r | jq -er 'map_values(select(.env.urls or .env.url)) | keys[]'); do
            echo -e "\e[96mBuilding source derivation $derivation\e[0m"
            paths+="$derivation"$'\n'
            paths+="$(nix build "$derivation^*" --print-out-paths)"$'\n'
          done
          for derivation in $(nix derivation show -r '.#formatter' | jq -er 'map_values(select(.env.urls or .env.url)) | keys[]'); do
            echo -e "\e[96mBuilding source derivation $derivation\e[0m"
            paths+="$derivation"$'\n'
            paths+="$(nix build "$derivation^*" --print-out-paths)"$'\n'
          done
          nix copy --to ./closure-input "$image_derivation" --no-check-sigs
          nix copy --to ./closure-input "$formatter_derivation" --no-check-sigs
          mkdir closure-determination
          mkdir -p closure-determination/nix/store
          sudo mv closure-input/nix/store/* closure-determination/nix/store/
          for src in $paths; do
            if [ -e "$src" ]; then
              dst="closure-determination/nix/store/$(basename "$src")"
              if [ ! -e "$dst" ]; then
                echo -e "\e[96mMoving $src to $dst\e[0m"
                sudo mv "$src" "$dst"
              fi
            fi
          done
      - name: Compress
        run: |
          sudo rm -rf /nix/store/*
          for src in closure-tar/nix/store/*; do
            dst="/nix/store/$(basename "$src")"
            if [ ! -e "$dst" ]; then
              echo -e "\e[96mMoving $src to $dst\e[0m"
              sudo mv "$src" "$dst"
            fi
          done
          for src in closure-zstd/nix/store/*; do
            dst="/nix/store/$(basename "$src")"
            if [ ! -e "$dst" ]; then
              echo -e "\e[96mMoving $src to $dst\e[0m"
              sudo mv "$src" "$dst"
            fi
          done
          cd closure-determination
          size=$(LC_ALL=C ../tar --sort=name --format=posix --mtime='@1' --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime -cf - * | wc -c)
          echo "Tarball without compression will be $size bytes large"
          LC_ALL=C ../tar --sort=name --format=posix --mtime='@1' --owner=0 --group=0 --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime -cf - * | ../zstd --stream-size=$size -T0 --ultra -20 > ../closure-determination.tar.zst
          cd ..
          sudo rm -r closure-determination/
      - name: Attest artifact
        id: attest-artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: closure-determination.tar.zst
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: closure-determination.tar.zst
          path: closure-determination.tar.zst
      - name: Prepare release files
        run: |
          cp "${{ steps.attest-artifact.outputs.bundle-path }}" ./closure-determination.tar.zst.sigstore.json
          split --numeric-suffixes=1 -C 2147483647 closure-determination.tar.zst closure-determination.tar.zst.part
          rm closure-determination.tar.zst
      - name: Release
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            closure-determination.tar.zst.part*
            closure-determination.tar.zst.sigstore.json
