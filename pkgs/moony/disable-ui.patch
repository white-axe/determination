# Determination - Deterministic rendering environment for white-axe's music
# Copyright (C) 2024 Liu Hao <whiteaxe@tuta.io>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This patch disables compiling Moony's GUI to reduce runtime dependencies.

--- a/api/api.c
+++ b/api/api.c
@@ -20,7 +20,7 @@
 #include <api_state.h>
 #include <api_parameter.h>
 
-#include <canvas.lv2/idisp.h>
+//#include <canvas.lv2/idisp.h>
 
 #define RDF_PREFIX    "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 #define RDFS_PREFIX   "http://www.w3.org/2000/01/rdf-schema#"
@@ -1036,48 +1036,48 @@ static const LV2_Worker_Interface work_iface = {
 	.end_run = _end_run
 };
 
-__non_realtime static LV2_Inline_Display_Image_Surface *
-_idisp_render(LV2_Handle instance, uint32_t w, uint32_t h)
-{
-	moony_t *moony = instance;
-
-	float aspect_ratio = 1.f; //FIXME
-
-	LV2_Inline_Display_Image_Surface *surf = 
-		lv2_canvas_idisp_surf_configure(moony->canvas_idisp, w, h, aspect_ratio);
-
-	const LV2_Atom *value = NULL;
-	size_t tot_size = 0;
-	while( (value = varchunk_read_request(moony->to_idisp, &tot_size)) )
-	{
-		moony->canvas_graph = realloc(moony->canvas_graph, tot_size);
-
-		memcpy(moony->canvas_graph, value, tot_size);
-
-		varchunk_read_advance(moony->to_idisp);
-	}
-
-	value = moony->canvas_graph;
-
-	const LV2_Atom fake = {
-		.size = 0,
-		.type = moony->forge.Tuple
-	};
-
-	if(!value)
-	{
-		value = &fake;
-	}
-
-	lv2_canvas_idisp_render_body(moony->canvas_idisp, value->type, value->size,
-		LV2_ATOM_BODY_CONST(value));
-
-	return surf;
-}
-
-static const LV2_Inline_Display_Interface idisp_iface = {
-	.render = _idisp_render
-};
+//__non_realtime static LV2_Inline_Display_Image_Surface *
+//_idisp_render(LV2_Handle instance, uint32_t w, uint32_t h)
+//{
+//	moony_t *moony = instance;
+//
+//	float aspect_ratio = 1.f; //FIXME
+//
+//	LV2_Inline_Display_Image_Surface *surf =
+//		lv2_canvas_idisp_surf_configure(moony->canvas_idisp, w, h, aspect_ratio);
+//
+//	const LV2_Atom *value = NULL;
+//	size_t tot_size = 0;
+//	while( (value = varchunk_read_request(moony->to_idisp, &tot_size)) )
+//	{
+//		moony->canvas_graph = realloc(moony->canvas_graph, tot_size);
+//
+//		memcpy(moony->canvas_graph, value, tot_size);
+//
+//		varchunk_read_advance(moony->to_idisp);
+//	}
+//
+//	value = moony->canvas_graph;
+//
+//	const LV2_Atom fake = {
+//		.size = 0,
+//		.type = moony->forge.Tuple
+//	};
+//
+//	if(!value)
+//	{
+//		value = &fake;
+//	}
+//
+//	lv2_canvas_idisp_render_body(moony->canvas_idisp, value->type, value->size,
+//		LV2_ATOM_BODY_CONST(value));
+//
+//	return surf;
+//}
+//
+//static const LV2_Inline_Display_Interface idisp_iface = {
+//	.render = _idisp_render
+//};
 
 __non_realtime const void*
 extension_data(const char* uri)
@@ -1086,8 +1086,8 @@ extension_data(const char* uri)
 		return &work_iface;
 	else if(!strcmp(uri, LV2_STATE__interface))
 		return &state_iface;
-	else if(!strcmp(uri, LV2_INLINEDISPLAY__interface))
-		return &idisp_iface;
+	//else if(!strcmp(uri, LV2_INLINEDISPLAY__interface))
+	//	return &idisp_iface;
 	else
 		return NULL;
 }
@@ -1129,13 +1129,13 @@ moony_init(moony_t *moony, const char *subject, double sample_rate,
 
 	bool load_default_state = false;
 	xpress_map_t *voice_map = NULL;
-	LV2_Inline_Display *queue_draw = NULL;
-	moony->to_idisp = varchunk_new(MOONY_MAX_CHUNK_LEN * 2, true);
-	if(!moony->to_idisp)
-	{
-		fprintf(stderr, "varchunk_new failed\n");
-		return -1;
-	}
+	//LV2_Inline_Display *queue_draw = NULL;
+	//moony->to_idisp = varchunk_new(MOONY_MAX_CHUNK_LEN * 2, true);
+	//if(!moony->to_idisp)
+	//{
+	//	fprintf(stderr, "varchunk_new failed\n");
+	//	return -1;
+	//}
 
 	for(unsigned i=0; features[i]; i++)
 	{
@@ -1155,8 +1155,8 @@ moony_init(moony_t *moony, const char *subject, double sample_rate,
 			load_default_state = true;
 		else if(!strcmp(features[i]->URI, XPRESS__voiceMap))
 			voice_map = features[i]->data;
-		else if(!strcmp(features[i]->URI, LV2_INLINEDISPLAY__queue_draw))
-			queue_draw = features[i]->data;
+		//else if(!strcmp(features[i]->URI, LV2_INLINEDISPLAY__queue_draw))
+		//	queue_draw = features[i]->data;
 	}
 
 	if(!moony->map)
@@ -1249,7 +1249,7 @@ moony_init(moony_t *moony, const char *subject, double sample_rate,
 	moony->uris.xpress_pressure = moony->map->map(moony->map->handle, XPRESS__pressure);
 	moony->uris.xpress_timbre = moony->map->map(moony->map->handle, XPRESS__timbre);
 
-	lv2_canvas_urid_init(&moony->canvas_urid, moony->map);
+	//lv2_canvas_urid_init(&moony->canvas_urid, moony->map);
 
 	lv2_osc_urid_init(&moony->osc_urid, moony->map);
 	lv2_atom_forge_init(&moony->forge, moony->map);
@@ -1316,8 +1316,8 @@ moony_init(moony_t *moony, const char *subject, double sample_rate,
 
 	moony_freeuserdata(moony);
 
-	moony->canvas_idisp = calloc(1, sizeof(LV2_Canvas_Idisp));
-	lv2_canvas_idisp_init(moony->canvas_idisp, queue_draw, moony->map);
+	//moony->canvas_idisp = calloc(1, sizeof(LV2_Canvas_Idisp));
+	//lv2_canvas_idisp_init(moony->canvas_idisp, queue_draw, moony->map);
 
 	return 0;
 }
@@ -1325,12 +1325,12 @@ moony_init(moony_t *moony, const char *subject, double sample_rate,
 __non_realtime void
 moony_deinit(moony_t *moony)
 {
-	if(moony->to_idisp)
-		varchunk_free(moony->to_idisp);
-	free(moony->canvas_graph);
-	lv2_canvas_idisp_deinit(moony->canvas_idisp);
-	free(moony->canvas_idisp);
-	moony->canvas_idisp = NULL;
+	//if(moony->to_idisp)
+	//	varchunk_free(moony->to_idisp);
+	//free(moony->canvas_graph);
+	//lv2_canvas_idisp_deinit(moony->canvas_idisp);
+	//free(moony->canvas_idisp);
+	//moony->canvas_idisp = NULL;
 
 	LV2_Atom *state_atom_old = (LV2_Atom *)atomic_load_explicit(&moony->state_atom_new, memory_order_relaxed);
 	if(state_atom_old)
@@ -2188,21 +2188,21 @@ moony_in(moony_t *moony, const LV2_Atom_Sequence *control, LV2_Atom_Sequence *no
 		if(ref)
 			ref = _moony_props_out(moony, 0, forge);
 
-		// invalidate inline display
-		const LV2_Atom fake = {
-			.size = 0,
-			.type = moony->forge.Tuple
-		};
-
-		const uint32_t tot_size = lv2_atom_total_size(&fake);
-		void *dst;
-		if( (dst = varchunk_write_request(moony->to_idisp, tot_size)) )
-		{
-			memcpy(dst, &fake, tot_size);
-			varchunk_write_advance(moony->to_idisp, tot_size);
-
-			lv2_canvas_idisp_queue_draw(moony->canvas_idisp);
-		}
+		//// invalidate inline display
+		//const LV2_Atom fake = {
+		//	.size = 0,
+		//	.type = moony->forge.Tuple
+		//};
+		//
+		//const uint32_t tot_size = lv2_atom_total_size(&fake);
+		//void *dst;
+		//if( (dst = varchunk_write_request(moony->to_idisp, tot_size)) )
+		//{
+		//	memcpy(dst, &fake, tot_size);
+		//	varchunk_write_advance(moony->to_idisp, tot_size);
+		//
+		//	lv2_canvas_idisp_queue_draw(moony->canvas_idisp);
+		//}
 	}
 
 	// read control sequence
@@ -2364,91 +2364,91 @@ moony_out(moony_t *moony, LV2_Atom_Sequence *notify, uint32_t frames)
 	else
 		lv2_atom_sequence_clear(notify);
 
-	LV2_ATOM_SEQUENCE_FOREACH(notify, ev)
-	{
-		const LV2_Atom_Object *obj = (const LV2_Atom_Object *)&ev->body;
-
-		if(!lv2_atom_forge_is_object_type(forge, obj->atom.type))
-		{
-			continue;
-		}
-
-		if(obj->body.otype == moony->uris.patch.set)
-		{
-			const LV2_Atom_URID *subject = NULL;
-			const LV2_Atom_URID *property = NULL;
-			const LV2_Atom *value = NULL;
-
-			lv2_atom_object_get(obj,
-				moony->uris.patch.subject, &subject,
-				moony->uris.patch.property, &property,
-				moony->uris.patch.value, &value,
-				0);
-
-			const LV2_URID subj = subject && (subject->atom.type == forge->URID)
-				? subject->body : 0;
-			(void)subj;
-			//FIXME check subj
-
-			const LV2_URID prop = property && (property->atom.type == forge->URID)
-				? property->body : 0;
-
-			if(  (prop == moony->canvas_urid.Canvas_graph)
-				&& value
-				&& (value->type == forge->Tuple) )
-			{
-				const uint32_t tot_size = lv2_atom_total_size(value);
-				void *dst;
-				if( (dst = varchunk_write_request(moony->to_idisp, tot_size)) )
-				{
-					memcpy(dst, value, tot_size);
-					varchunk_write_advance(moony->to_idisp, tot_size);
-
-					lv2_canvas_idisp_queue_draw(moony->canvas_idisp);
-				}
-			}
-		}
-		else if(obj->body.otype == moony->uris.patch.put)
-		{
-			const LV2_Atom_URID *subject = NULL;
-			const LV2_Atom_Object *body = NULL;
-
-			lv2_atom_object_get(obj,
-				moony->uris.patch.subject, &subject,
-				moony->uris.patch.body, &body,
-				0);
-
-			const LV2_URID subj = subject && (subject->atom.type == forge->URID)
-				? subject->body : 0;
-			(void)subj;
-			//FIXME check subj
-
-			if(  body
-				&& lv2_atom_forge_is_object_type(forge, body->atom.type) )
-			{
-				LV2_ATOM_OBJECT_FOREACH(body, prop)
-				{
-					const LV2_Atom *value = &prop->value;
-
-					if(  (prop->key != moony->canvas_urid.Canvas_graph)
-						|| (value->type != forge->Tuple))
-					{
-						continue;
-					}
-
-					const uint32_t tot_size = lv2_atom_total_size(value);
-					void *dst;
-					if( (dst = varchunk_write_request(moony->to_idisp, tot_size)) )
-					{
-						memcpy(dst, value, tot_size);
-						varchunk_write_advance(moony->to_idisp, tot_size);
-
-						lv2_canvas_idisp_queue_draw(moony->canvas_idisp);
-					}
-				}
-			}
-		}
-	}
+	//LV2_ATOM_SEQUENCE_FOREACH(notify, ev)
+	//{
+	//	const LV2_Atom_Object *obj = (const LV2_Atom_Object *)&ev->body;
+	//
+	//	if(!lv2_atom_forge_is_object_type(forge, obj->atom.type))
+	//	{
+	//		continue;
+	//	}
+	//
+	//	if(obj->body.otype == moony->uris.patch.set)
+	//	{
+	//		const LV2_Atom_URID *subject = NULL;
+	//		const LV2_Atom_URID *property = NULL;
+	//		const LV2_Atom *value = NULL;
+	//
+	//		lv2_atom_object_get(obj,
+	//			moony->uris.patch.subject, &subject,
+	//			moony->uris.patch.property, &property,
+	//			moony->uris.patch.value, &value,
+	//			0);
+	//
+	//		const LV2_URID subj = subject && (subject->atom.type == forge->URID)
+	//			? subject->body : 0;
+	//		(void)subj;
+	//		//FIXME check subj
+	//
+	//		const LV2_URID prop = property && (property->atom.type == forge->URID)
+	//			? property->body : 0;
+	//
+	//		if(  (prop == moony->canvas_urid.Canvas_graph)
+	//			&& value
+	//			&& (value->type == forge->Tuple) )
+	//		{
+	//			const uint32_t tot_size = lv2_atom_total_size(value);
+	//			void *dst;
+	//			if( (dst = varchunk_write_request(moony->to_idisp, tot_size)) )
+	//			{
+	//				memcpy(dst, value, tot_size);
+	//				varchunk_write_advance(moony->to_idisp, tot_size);
+	//
+	//				lv2_canvas_idisp_queue_draw(moony->canvas_idisp);
+	//			}
+	//		}
+	//	}
+	//	else if(obj->body.otype == moony->uris.patch.put)
+	//	{
+	//		const LV2_Atom_URID *subject = NULL;
+	//		const LV2_Atom_Object *body = NULL;
+	//
+	//		lv2_atom_object_get(obj,
+	//			moony->uris.patch.subject, &subject,
+	//			moony->uris.patch.body, &body,
+	//			0);
+	//
+	//		const LV2_URID subj = subject && (subject->atom.type == forge->URID)
+	//			? subject->body : 0;
+	//		(void)subj;
+	//		//FIXME check subj
+	//
+	//		if(  body
+	//			&& lv2_atom_forge_is_object_type(forge, body->atom.type) )
+	//		{
+	//			LV2_ATOM_OBJECT_FOREACH(body, prop)
+	//			{
+	//				const LV2_Atom *value = &prop->value;
+	//
+	//				if(  (prop->key != moony->canvas_urid.Canvas_graph)
+	//					|| (value->type != forge->Tuple))
+	//				{
+	//					continue;
+	//				}
+	//
+	//				const uint32_t tot_size = lv2_atom_total_size(value);
+	//				void *dst;
+	//				if( (dst = varchunk_write_request(moony->to_idisp, tot_size)) )
+	//				{
+	//					memcpy(dst, value, tot_size);
+	//					varchunk_write_advance(moony->to_idisp, tot_size);
+	//
+	//					lv2_canvas_idisp_queue_draw(moony->canvas_idisp);
+	//				}
+	//			}
+	//		}
+	//	}
+	//}
 
 	{
 		moony_job_t *req;
--- a/meson.build
+++ b/meson.build
@@ -8,7 +8,7 @@ project('moony.lv2', 'c', default_options : [
 	'b_lto=false',
 	'c_std=gnu11'])
 
-d2tk = subproject('d2tk')
+#d2tk = subproject('d2tk')
 canvas_lv2 = subproject('canvas.lv2')
 props_lv2 = subproject('props.lv2')
 xpress_lv2 = subproject('xpress.lv2')
@@ -23,16 +23,16 @@ gc_method = get_option('gc-method')
 
 inst_dir = join_paths(lv2libdir, meson.project_name())
 
-if get_option('use-backend-nanovg').enabled()
-	d2tk_dep = d2tk.get_variable('d2tk_nanovg')
-elif get_option('use-backend-cairo').enabled()
-	d2tk_dep = d2tk.get_variable('d2tk_cairo')
-else
-	error('no valid UI backend given')
-endif
+#if get_option('use-backend-nanovg').enabled()
+#	d2tk_dep = d2tk.get_variable('d2tk_nanovg')
+#elif get_option('use-backend-cairo').enabled()
+#	d2tk_dep = d2tk.get_variable('d2tk_cairo')
+#else
+#	error('no valid UI backend given')
+#endif
 
 canvas_lv2_dep = canvas_lv2.get_variable('canvas_lv2')
-canvas_idisp_lv2_dep = canvas_lv2.get_variable('canvas_idisp_lv2')
+#canvas_idisp_lv2_dep = canvas_lv2.get_variable('canvas_idisp_lv2')
 props_lv2_dep = props_lv2.get_variable('props_lv2')
 xpress_lv2_dep = xpress_lv2.get_variable('xpress_lv2')
 ser_atom_lv2_dep = ser_atom_lv2.get_variable('ser_atom_lv2')
@@ -51,8 +51,8 @@ m_dep = cc.find_library('m')
 lv2_dep = dependency('lv2', version : '>=1.14.0')
 thread_dep = dependency('threads')
 
-dsp_deps = [m_dep, lv2_dep, thread_dep, varchunk_dep, props_lv2_dep, xpress_lv2_dep, timely_lv2_dep, osc_lv2_dep, canvas_lv2_dep, canvas_idisp_lv2_dep]
-ui_deps = [m_dep, lv2_dep, varchunk_dep, props_lv2_dep, xpress_lv2_dep, osc_lv2_dep, canvas_lv2_dep, ser_atom_lv2_dep, d2tk_dep]
+dsp_deps = [m_dep, lv2_dep, thread_dep, varchunk_dep, props_lv2_dep, xpress_lv2_dep, timely_lv2_dep, osc_lv2_dep, canvas_lv2_dep]
+#ui_deps = [m_dep, lv2_dep, varchunk_dep, props_lv2_dep, xpress_lv2_dep, osc_lv2_dep, canvas_lv2_dep, ser_atom_lv2_dep, d2tk_dep]
 
 if cc.has_member('LV2UI_Request_Value', 'request',
 		prefix : '#include <lv2/lv2plug.in/ns/extensions/ui/ui.h>')
--- a/subprojects/canvas.lv2/meson.build
+++ b/subprojects/canvas.lv2/meson.build
@@ -15,7 +15,7 @@ reuse = find_program('reuse', required : false)
 add_project_arguments('-D_GNU_SOURCE', language : 'c')
 
 lv2_dep = dependency('lv2', version : '>=1.14.0')
-cairo_dep = dependency('cairo', version : '>=1.16.0')
+#cairo_dep = dependency('cairo', version : '>=1.16.0')
 
 lib_deps = []
 lib_deps += lv2_dep
@@ -24,24 +24,24 @@ lib_incs = []
 lib_incs += include_directories('')
 
 lib_srcs = []
-lib_srcs += join_paths('src', 'canvas.c')
+#lib_srcs += join_paths('src', 'canvas.c')
 lib_srcs += join_paths('src', 'forge.c')
 
-lib_cairo_deps = []
-lib_cairo_deps += cairo_dep
-
-lib_cairo_incs = []
-lib_cairo_src = join_paths('src', 'idisp.c')
+#lib_cairo_deps = []
+#lib_cairo_deps += cairo_dep
+#
+#lib_cairo_incs = []
+#lib_cairo_src = join_paths('src', 'idisp.c')
 
 canvas_lv2 = declare_dependency(
   include_directories : lib_incs,
   dependencies : lib_deps,
   sources : lib_srcs)
 
-canvas_idisp_lv2 = declare_dependency(
-  include_directories : lib_incs,
-  dependencies : [lib_deps, lib_cairo_deps],
-  sources : [lib_srcs, lib_cairo_src])
+#canvas_idisp_lv2 = declare_dependency(
+#  include_directories : lib_incs,
+#  dependencies : [lib_deps, lib_cairo_deps],
+#  sources : [lib_srcs, lib_cairo_src])
 
 test_args = []
 test_args += '-fvisibility=hidden'
@@ -49,7 +49,7 @@ test_args += '-ffast-math'
 
 test_deps = []
 test_deps += canvas_lv2
-test_deps += canvas_idisp_lv2
+#test_deps += canvas_idisp_lv2
 
 test_srcs = []
 test_srcs += join_paths('test', 'canvas.c')
--- a/ttl/moony.ttl
+++ b/ttl/moony.ttl
@@ -78,8 +78,8 @@ moony:c1xc1
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -151,8 +151,8 @@ moony:c2xc2
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -239,8 +239,8 @@ moony:c4xc4
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -357,8 +357,8 @@ moony:a1xa1
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -437,8 +437,8 @@ moony:a2xa2
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -541,8 +541,8 @@ moony:a4xa4
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -693,8 +693,8 @@ moony:c1a1xc1a1
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -792,8 +792,8 @@ moony:c2a1xc2a1
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
@@ -906,8 +906,8 @@ moony:c4a1xc4a1
 	lv2:project proj:moony ;
 	lv2:optionalFeature lv2:isLive, lv2:hardRTCapable, bufsz:boundedBlockLength, osc:schedule, state:loadDefaultState, xpress:voiceMap, state:threadSafeRestore, opts:options, log:log ;
 	lv2:extensionData work:interface, state:interface ;
-	lv2:optionalFeature idisp:queue_draw ;
-	lv2:extensionData idisp:interface ;
+	#lv2:optionalFeature idisp:queue_draw ;
+	#lv2:extensionData idisp:interface ;
 	lv2:requiredFeature work:schedule, urid:map, urid:unmap ;
 	opts:supportedOption bufsz:minBlockLength, bufsz:maxBlockLength, bufsz:nominalBlockLength, bufsz:sequenceSize, ui:updateRate, param:sampleRate ;
 
