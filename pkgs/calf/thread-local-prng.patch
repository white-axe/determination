# Determination - Deterministic rendering environment for white-axe's music
# Copyright (C) 2024 Liu Hao <whiteaxe@tuta.io>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# When there's more than one Calf instance in the same Carla project, Calf is
# only started up once, but each instance gets its own JACK client. Each JACK
# client runs in a different thread and they may process audio concurrently if
# the JACK graph allows it. Calf uses `rand()` to generate random numbers which
# isn't thread-local, so that can cause concurrency-related nondeterminism. This
# patch adds a thread-safe reimplementation of `rand()` and `srand()` that
# otherwise behaves identically. default.nix is responsible for substituting all
# calls to the normal `rand()` and `srand()` with these ones.

--- /dev/null
+++ b/src/calf/determination_prng.h
@@ -0,0 +1,3 @@
+#pragma once
+int determination_rand();
+void determination_srand(unsigned int seed);
--- a/src/utils.cpp
+++ b/src/utils.cpp
@@ -202,3 +202,23 @@ vector <direntry> list_directory(const string &path)
 }
 #endif
 }
+
+static thread_local random_data determination_prng_buf = { .state = NULL };
+static thread_local char determination_prng_statebuf[128];
+
+static inline void determination_prng_initialize() {
+    if (determination_prng_buf.state == NULL)
+        initstate_r(1, determination_prng_statebuf, 128, &determination_prng_buf);
+}
+
+int determination_rand() {
+    determination_prng_initialize();
+    int32_t result;
+    random_r(&determination_prng_buf, &result);
+    return result;
+}
+
+void determination_srand(unsigned int seed) {
+    determination_prng_initialize();
+    srandom_r(seed, &determination_prng_buf);
+}
