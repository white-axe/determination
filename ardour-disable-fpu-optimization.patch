# Determination - Deterministic rendering environment for white-axe's music
# Copyright (C) 2024 Liu Hao <whiteaxe@tuta.io>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Ardour by default uses AVX and SSE instructions to make the code faster.
# However, not every x86-64 processor has these instructions and some
# processors may have different versions of the instructions. That's a problem
# because it makes floating-point arithmetic slightly different on different
# processors! To be portable, we disable all the AVX and SSE optimizations here.

--- a/libs/ardour/wscript
+++ b/libs/ardour/wscript
@@ -478,7 +478,7 @@ def build(bld):
     fma_sources = []
     avx512f_sources = []
 
-    if not Options.options.no_fpu_optimization:
+    if False:
         if (bld.env['build_target'] == 'i386' or bld.env['build_target'] == 'i686'):
             obj.source += [ 'sse_functions_xmm.cc', 'sse_functions.s', ]
             avx_sources = [ 'sse_functions_avx_linux.cc' ]
--- a/wscript
+++ b/wscript
@@ -534,7 +534,7 @@ int main() { return 0; }''',
         #
         compiler_flags.append ('-U__STRICT_ANSI__')
 
-    if not opt.no_fpu_optimization:
+    if False:
         if conf.env['build_target'] == 'armhf' or conf.env['build_target'] == 'aarch64':
             conf.define('ARM_NEON_SUPPORT', 1)
         elif conf.env['build_target'] == 'mingw':
@@ -601,7 +601,7 @@ int main() { return 0; }''',
         if not (opt.arm64 or conf.env['build_target'] == 'armhf' and conf.env['build_target'] == 'aarch64'):
             compiler_flags.append ("-DARCH_X86")
 
-        if platform == 'linux' and conf.env['build_target'] != 'armhf' and conf.env['build_target'] != 'aarch64':
+        if False:
 
             #
             # determine processor flags via /proc/cpuinfo
@@ -624,10 +624,10 @@ int main() { return 0; }''',
             elif cpu == "i686":
                 compiler_flags.append ("-march=i686")
 
-        if not is_clang and ((conf.env['build_target'] == 'i686') or (conf.env['build_target'] == 'x86_64')) and build_host_supports_sse:
+        if False:
             compiler_flags.extend ([ flags_dict['sse'], flags_dict['fpmath-sse'], flags_dict['xmmintrinsics'] ])
 
-        if (conf.env['build_target'] == 'mingw'):
+        if False:
             if (re.search ("(x86_64|AMD64)", cpu) is not None):
                 # on Windows sse is supported by 64 bit platforms only
                 build_host_supports_sse = True
@@ -1366,7 +1366,7 @@ int main () { __int128 x = 0; return 0; }
     if not opts.no_phone_home:
         conf.define('PHONE_HOME', 1)
         conf.env['PHONE_HOME'] = True
-    if not opts.no_fpu_optimization:
+    if False:
         conf.env['FPU_OPTIMIZATION'] = True
     if opts.freedesktop:
         conf.env['FREEDESKTOP'] = True
@@ -1565,7 +1565,7 @@ const char* const ardour_config_info = "\\n\\
     write_config_text('Denormal exceptions',   conf.is_defined('DEBUG_DENORMAL_EXCEPTION'))
     write_config_text('Dr. Mingw',             conf.is_defined('HAVE_DRMINGW'))
     write_config_text('FLAC',                  conf.is_defined('HAVE_FLAC'))
-    write_config_text('FPU optimization',      not opts.no_fpu_optimization)
+    write_config_text('FPU optimization',      False)
     write_config_text('FPU AVX512F support',   conf.is_defined('FPU_AVX512F_SUPPORT'))
     write_config_text('FPU AVX/FMA support',   conf.is_defined('FPU_AVX_FMA_SUPPORT'))
     write_config_text('Futex Semaphore',       conf.is_defined('USE_FUTEX_SEMAPHORE'))
